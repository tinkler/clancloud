// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
package route
import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/tinkler/mqttadmin/pkg/jsonz/sjson"
	"github.com/tinkler/clancloud/backend/memorial/internal/model/memorial"
	"github.com/tinkler/mqttadmin/pkg/status"
)

func RoutesMemorial(m chi.Router) {
	m.Route("/memorial", func(r chi.Router) {
		
		r.Post("/memorials/load", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*memorial.Memorials, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*memorial.Memorials,[]*memorial.Memorial]{Data:m.Data}
			res.Resp, err = m.Data.Load(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/memorial/create", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*memorial.Memorial, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*memorial.Memorial,any]{Data:m.Data}
			err = m.Data.Create(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/memorial/update", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*memorial.Memorial, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*memorial.Memorial,any]{Data:m.Data}
			err = m.Data.Update(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/memorial/delete", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*memorial.Memorial, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*memorial.Memorial,any]{Data:m.Data}
			err = m.Data.Delete(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/memorial/commemorate", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*memorial.Memorial, struct{
				Commemorate *memorial.Commemorate 
				 } ]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*memorial.Memorial,any]{Data:m.Data}
			err = m.Data.Commemorate(r.Context(), m.Args.Commemorate, )
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/memorial/latest-commemorations", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*memorial.Memorial, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*memorial.Memorial,[]*memorial.Commemorate]{Data:m.Data}
			res.Resp, err = m.Data.LatestCommemorations(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
	})
}
