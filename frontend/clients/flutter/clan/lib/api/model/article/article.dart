// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
import '../../http.dart';
import './const.dart';


class Article {
	
	String id = "";
	
	String title = "";
	
	String summary = "";
	
	String content = "";
	
	String createByUserId = "";
	
	int totalReadTimes = 0;
	
	String createAt = "";
	
	
	/// Create a new article when ID is empty
	/// Or else update title,summary,content
	Future<void> save(
		
	) async {
		var response = await D.instance.dio.post('$modelUrlPrefix/article/article/save', data: {
			"data": toJson(),
			"args": {  }
		});
		if (response.data['code'] == 0) {
			var respModel = Article.fromJson(response.data['data']['data']);
			assign(respModel);
			
		}
		
	}
	
	Article();

	assign(Article other) {
		
		id = other.id;
		
		title = other.title;
		
		summary = other.summary;
		
		content = other.content;
		
		createByUserId = other.createByUserId;
		
		totalReadTimes = other.totalReadTimes;
		
		createAt = other.createAt;
		
	}

	Map<String, dynamic> toJson() {
		return {
			
			"id": id,
			
			"title": title,
			
			"summary": summary,
			
			"content": content,
			
			"create_by_user_id": createByUserId,
			
			"total_read_times": totalReadTimes,
			
			"create_at": createAt,
			
		};
	}
	Article.fromJson(Map<String, dynamic> json) {
		
		id = json["id"];
		
		title = json["title"];
		
		summary = json["summary"];
		
		content = json["content"];
		
		createByUserId = json["create_by_user_id"];
		
		totalReadTimes = json["total_read_times"];
		
		createAt = json["create_at"];
		
	}
}

class Articles {
	
	
	/// it usually be cache in the frontend
	/// get the latest 4 articles
	Future<List<Article>> homeList(
		
	) async {
		var response = await D.instance.dio.post('$modelUrlPrefix/article/articles/home-list', data: {
			"data": toJson(),
			"args": {  }
		});
		if (response.data['code'] == 0) {
			var respModel = Articles.fromJson(response.data['data']['data']);
			assign(respModel);
			if (response.data['data']['resp'] != null) {
				return (response.data['data']['resp'] as List<dynamic>).map((e) => Article.fromJson(e)).toList();
			} else {
				return [];
			}
			
		}
		return [];
		
	}
	
	Articles();

	assign(Articles other) {
		
	}

	Map<String, dynamic> toJson() {
		return {
			
		};
	}
	Articles.fromJson(Map<String, dynamic> json) {
		
	}
}


